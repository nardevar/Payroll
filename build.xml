<project name="hdfc-bank" basedir="." default="package">
	
	<property name="src.dir" location="src" />	
	<property name="src.test.dir" location="test" />	
	<property name="classes.dir" location="classes" />	
	<property name="test.classes.dir" location="test-classes" />	
	<property name="target.dir" location="target" />	
	<property name="inst.dir" location="generated" />	
	<property name="report.dir" location="report" />
	
	<property name="junit.output" location="${report.dir}/junit" />	
	<property name="cobertura.output" location="${report.dir}/cobertura" />	
	<property name="pmd.output" location="${report.dir}/pmd" />
	<property name="checkstyle.output" location="${report.dir}/checkstyle" />

	<property name="lib.dir" location="lib" />
	<property name="junit.lib.dir" location="${lib.dir}/junit" />	
	<property name="cobertura.lib.dir" location="${lib.dir}/cobertura" />	
	<property name="pmd.lib.dir" location="${lib.dir}/pmd" />
	<property name="checkstyle.lib.dir" location="${lib.dir}/checkstyle" />
	
	<path id="junit.classpath">
		<pathelement path="${classes.dir}" />
		<pathelement path="${test.classes.dir}" />
		<pathelement path="${junit.lib.dir}/junit-4.0.jar" />
	</path>

	<path id="cobertura.classpath">
		<fileset dir="${cobertura.lib.dir}">
       			<include name="cobertura.jar" />
       			<include name="lib/**/*.jar" />
   		</fileset>
	</path>

	<path id="pmd.classpath">
		<fileset dir="${pmd.lib.dir}">
       			<include name="*.jar" />
   		</fileset>
	</path>
	
	<path id="checkstyle.classpath">
		<fileset dir="${checkstyle.lib.dir}">
       			<include name="*.jar" />
       		</fileset>
	</path>

	<taskdef resource="tasks.properties" classpathref="cobertura.classpath" />
	<taskdef classpathref="pmd.classpath"  name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" />
	<taskdef resource="checkstyletask.properties" classpathref="checkstyle.classpath"/>

	<target name="info">
		<echo>It is a Banking application!</echo>		
		<echo>Author - Bill</echo>		
		<echo>Email - billgates@microsoft.com</echo>		
	</target>

	<target name="clean">
		<delete dir="${classes.dir}" />
		<delete dir="${test.classes.dir}" />
		<delete dir="${cobertura.output}" />
		<delete dir="${junit.output}" />
		<delete dir="${pmd.output}" />
		<delete dir="${inst.dir}" />
		<delete dir="${report.dir}" />
		<delete dir="${target.dir}" />
		<delete file="cobertura.ser" />
		<echo>Cleaning development environment!</echo>
	</target>


	<target name="prepare" depends="clean">
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${test.classes.dir}" />
		<mkdir dir="${junit.output}" />
		<mkdir dir="${cobertura.output}" />
		<mkdir dir="${checkstyle.output}" />
		<mkdir dir="${pmd.output}" />
		<mkdir dir="${inst.dir}" />
	</target>

	<target name="compile" depends="prepare">
		<javac debug="on" srcdir="${src.dir}" destdir="${classes.dir}" />
	</target>

	<target name="compile-test" depends="compile">
		<javac srcdir="${src.test.dir}" destdir="${test.classes.dir}" classpathref="junit.classpath"  />
	</target>

	<target name="code-quality" depends="compile,compile-test">

		<pmd failOnRuleViolation="no">
			<formatter type="xml" toFile="${pmd.output}/index.xml" />
 			<sourceLanguage name="java" version="1.6"/>
			<ruleset>rulesets/java/basic.xml</ruleset>
			<ruleset>rulesets/java/design.xml</ruleset>
			<ruleset>rulesets/java/codesize.xml</ruleset>
			<ruleset>rulesets/java/comments.xml</ruleset>
			<ruleset>rulesets/java/imports.xml</ruleset>
			<ruleset>rulesets/java/javabeans.xml</ruleset>
			<ruleset>rulesets/java/naming.xml</ruleset>
			<ruleset>rulesets/java/unusedcode.xml</ruleset>
			<ruleset>rulesets/java/junit.xml</ruleset>
			<fileset dir="${src.dir}">
   				<include name="**/*.java"/>
  			</fileset>
			<fileset dir="${src.test.dir}">
   				<include name="**/*.java"/>
  			</fileset>
		</pmd>
	</target>

	<target name="instrument" depends="compile-test" >
		<delete file="cobertura.ser" />
		<cobertura-instrument todir="${inst.dir}">
    			<fileset dir="${classes.dir}">
        			<include name="**/*.class" />
       	  			<exclude name="**/Bank.class" />
      		</fileset>
    		</cobertura-instrument>
	</target>

	<target name="test" depends="instrument">
		<junit fork="true" printsummary="withOutAndErr" haltonfailure="no">

			<classpath location="${inst.dir}" />
			<classpath refid="cobertura.classpath" />
			<classpath location="${junit.lib.dir}/junit-4.0.jar" />
			<classpath location="${test.classes.dir}" />

			<formatter type="xml" />	

			<test name="com.hdfc.core.AccountServiceTest" todir="${junit.output}" />
			<test name="com.example.CalculatorServiceTest" todir="${junit.output}" />
		</junit>
	</target>

	<target name="test-report">
		<junitreport todir="${junit.output}">
			<fileset dir="${junit.output}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.output}/html"/>
		</junitreport>
	</target>

	<target name="coverage-report">
		<cobertura-report format="xml" destdir="${cobertura.output}"  srcdir="${src.dir}" />
	</target>
	
	<target name="checkstyle" description="Generates a report of code convention violations.">

  		<checkstyle config="lib/checkstyle/sun_checks.xml" failureProperty="checkstyle.failure" failOnViolation="false">
    		
    			<formatter type="xml" tofile="${checkstyle.output}/checkstyle_report.xml"/>
    		
    			<fileset dir="${src.dir}" includes="**/*.java"/>
  		</checkstyle>

  		<style in="checkstyle_report.xml" out="checkstyle_report.html" style="checkstyle.xsl"/>
	
	</target>

	<target name="report" depends="test,test-report,coverage-report,code-quality,checkstyle">
	</target>

	<target name="show-report">
		<exec executable="C:/Program Files (x86)/Google/Chrome/Application/chrome.exe" spawn="true">
			<arg value="${junit.output}/html/index.xml" />	
			<arg value="${cobertura.output}/index.xml" />	
			<arg value="${pmd.output}/index.xml" />	
		</exec>
	</target>

	<target name="app-run" depends="info,compile">
		<java classname="com.hdfc.core.Bank" classpath="${classes.dir}" />
	</target>

	<target name="package" depends="test">
		<jar destfile="${target.dir}/hdfc.jar" basedir="${classes.dir}" />
		<echo>Packaging is done!</echo>
	</target>

</project>
